// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hPWcLUPYEAQCx68W2M99up
// Component: V9IXGJKm1E2i

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: VqJkHSpfsMA-/component
import { ProductBox } from "@plasmicpkgs/commerce";
import { ProductMedia } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";
import { ProductVariantPicker } from "@plasmicpkgs/commerce";
import { AddToCartButton } from "@plasmicpkgs/commerce";
import Button from "../../Button"; // plasmic-import: FmwlxDiCew1-/component
import Icon from "../../Icon"; // plasmic-import: OMlRT0ZkDECn/component
import TextInput from "../../TextInput"; // plasmic-import: kbPkSE6WXfXQ/component

import { useScreenVariants as useScreenVariants_1Mv16YNowK28 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 1MV16YNowK28/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../t_9_imported_dep_4/plasmic.module.css"; // plasmic-import: rJmrvZ8rTbZpYCx9aXq6iH/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hPWcLUPYEAQCx68W2M99up/projectcss
import sty from "./PlasmicSingleProductPage.module.css"; // plasmic-import: V9IXGJKm1E2i/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: G7VTO1oIY5Ol/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: LENB83d6V84j/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: T6oyg622tahH/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: yji091Jl-BMS/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: _Gq3eT2mkBWh/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: UM82Bo7sMXTo/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: jacFiCA7aQEv/icon
import AngleRightsvgIcon from "./icons/PlasmicIcon__AngleRightsvg"; // plasmic-import: gd_fLC7pkVmg/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Xznpl4WmsyWl/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 7QjlkweO-RrC/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: F6PGrp-g60YA/icon

createPlasmicElementProxy;

export type PlasmicSingleProductPage__VariantMembers = {};
export type PlasmicSingleProductPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSingleProductPage__VariantsArgs;
export const PlasmicSingleProductPage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSingleProductPage__ArgsType = {};
type ArgPropType = keyof PlasmicSingleProductPage__ArgsType;
export const PlasmicSingleProductPage__ArgProps = new Array<ArgPropType>();

export type PlasmicSingleProductPage__OverridesType = {
  single?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  productBox?: Flex__<typeof ProductBox>;
  columns?: Flex__<"div">;
  productMedia?: Flex__<typeof ProductMedia>;
  productPrice?: Flex__<typeof ProductPriceComponent>;
  productVariantPicker?: Flex__<typeof ProductVariantPicker>;
  addToCartButton?: Flex__<typeof AddToCartButton>;
  textInput?: Flex__<typeof TextInput>;
};

export interface DefaultSingleProductPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSingleProductPage__RenderFunc(props: {
  variants: PlasmicSingleProductPage__VariantsArgs;
  args: PlasmicSingleProductPage__ArgsType;
  overrides: PlasmicSingleProductPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1Mv16YNowK28()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"single"}
          data-plasmic-override={overrides.single}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.single
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___9FUcy)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bmJss)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ni5Mv)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__og1Pb
                  )}
                >
                  {"Get 55% off Lorem Ipsum enough lorem discount"}
                </div>
              </Stack__>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__cvMr)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__ytnwd
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ac0J7
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__aOxDv)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Cwft
                      )}
                    >
                      {"Log in"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__yz9J9)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </div>
              ) : null}
            </Stack__>
          </Stack__>
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <ProductBox
            data-plasmic-name={"productBox"}
            data-plasmic-override={overrides.productBox}
            className={classNames("__wab_instance", sty.productBox)}
            id={(() => {
              try {
                return $ctx.params.slug;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___23Cg0)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aYwZ3)}
                  >
                    <div
                      data-plasmic-name={"columns"}
                      data-plasmic-override={overrides.columns}
                      className={classNames(projectcss.all, sty.columns)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__dJcC5
                        )}
                      >
                        <ProductMedia
                          data-plasmic-name={"productMedia"}
                          data-plasmic-override={overrides.productMedia}
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia
                          )}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.column___7XyPv
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            sty.h2___9U8KB
                          )}
                        >
                          <ProductTextField
                            className={classNames(
                              "__wab_instance",
                              sty.productTextField___8IbQp
                            )}
                            field={"name"}
                          />
                        </h2>
                        <ProductPriceComponent
                          data-plasmic-name={"productPrice"}
                          data-plasmic-override={overrides.productPrice}
                          className={classNames(
                            "__wab_instance",
                            sty.productPrice
                          )}
                        />

                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__tuAo
                          )}
                          field={"description"}
                        />

                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bCjKo
                          )}
                        >
                          <ProductVariantPicker
                            data-plasmic-name={"productVariantPicker"}
                            data-plasmic-override={
                              overrides.productVariantPicker
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.productVariantPicker
                            )}
                          />

                          <AddToCartButton
                            data-plasmic-name={"addToCartButton"}
                            data-plasmic-override={overrides.addToCartButton}
                            className={classNames(
                              "__wab_instance",
                              sty.addToCartButton
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__m6Te3
                              )}
                              color={"star"}
                              submitsForm={true}
                            >
                              {"Add to cart"}
                            </Button>
                          </AddToCartButton>
                        </Stack__>
                      </Stack__>
                    </div>
                  </div>
                </Stack__>
              )}
            </DataCtxReader__>
          </ProductBox>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__iYiY0)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ndIhF)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__py5Ml)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__d0Hz3)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ss9Vu
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100% Arabica and beyond"
                      : "100% Arabica and beyond"}
                  </h2>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wuirx)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qM78I)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__upfn9)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eUc7B
                        )}
                      >
                        {"Direct sourcing"}
                      </div>
                    }
                  >
                    <Icon5Icon
                      className={classNames(projectcss.all, sty.svg__v4AIk)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2KfSh)}
                >
                  <Icon
                    className={classNames("__wab_instance", sty.icon__hjKp3)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fbRn
                        )}
                      >
                        {"Organic farming practices"}
                      </div>
                    }
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__rXLbf)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ozPub)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__vOh0Q)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pw13J
                        )}
                      >
                        {"Biodegradable packaging"}
                      </div>
                    }
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg___7VhBt)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__fj1V)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__obSyo)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kp4Hq
                        )}
                      >
                        {"Enjoyment guarantee"}
                      </div>
                    }
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__u4EJa)}
                      role={"img"}
                    />
                  </Icon>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__psKVj)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__to2Si)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gzT7S)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___1G1ML)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aDcS
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us\n"
                      : "Contact us\n"}
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___7Eyb7
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "(555) 555-5555"
                      : "(555) 555-5555"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__pkkcp
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"support@example.com"}
                  </PlasmicLink__>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jBgdH)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__br1L0
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "#"
                      : `/shop`
                  }
                  platform={"nextjs"}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Shop"
                    : "Shop"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__x0KdI
                  )}
                  component={Link}
                  href={`/academy`}
                  platform={"nextjs"}
                >
                  {"The Academy"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__lp58D
                  )}
                  component={Link}
                  href={`/about`}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ueJjG
                  )}
                  component={Link}
                  href={`/help`}
                  platform={"nextjs"}
                >
                  {"Help"}
                </PlasmicLink__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__w0Ggi)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fcatk
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Email newsletter"
                    : "Email newsletter"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__nwnvr)}>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___4ZSeS
                        )}
                        submitsForm={true}
                      >
                        <AngleRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__jL3Eu)}
                          role={"img"}
                        />
                      </Button>
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["textInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    placeholder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "E-mail"
                        : "E-mail"
                    }
                    showEndIcon={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    }
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rq1DH)}
              >
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__p1U1F
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__tsVlj)}
                      role={"img"}
                    />
                  ) : null}
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sa6An)}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon3Icon
                          : Icon3Icon
                      }
                      className={classNames(projectcss.all, sty.svg__uBfOc)}
                      role={"img"}
                    />

                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___4DK9Y)}
                      role={"img"}
                    />

                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon28Icon
                          : Icon28Icon
                      }
                      className={classNames(projectcss.all, sty.svg__gip74)}
                      role={"img"}
                    />
                  </Stack__>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__pEh1H)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
              </Stack__>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__xAuuA)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__nG7Kf
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__f0LAx
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__l1KOd)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aCtAs
                      )}
                    >
                      {"Log in"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___9SVLv)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </div>
              ) : null}
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__n2F20)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iM5WP)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rkW7M)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1WKiy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qO2Mi
                      )}
                    >
                      {"\u00a9 Company. All rights reserved."}
                    </div>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ouh8R)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yTwmt)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__naBc7)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9Qj8H
                        )}
                      >
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__wuGPe
                          )}
                          component={Link}
                          href={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? `/shipping`
                              : `/shipping`
                          }
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__v7Peq
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__r0Flj
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "shop"
                              : "Shipping & Returns"}
                          </div>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zOxMl
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___5KrVf
                          )}
                          component={Link}
                          href={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? `/privacypolicy`
                              : `/privacypolicy`
                          }
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vNlIt
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hWfOn
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xsEdi
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Privacy policy"
                              : "Privacy policy"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__k4M0E
                          )}
                          component={Link}
                          href={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? `/terms`
                              : `/terms`
                          }
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__trMaj
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3Zhug
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Terms & Conditions"
                              : "Terms & Conditions"}
                          </div>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vtt45
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
          </Stack__>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  single: [
    "single",
    "header",
    "productBox",
    "columns",
    "productMedia",
    "productPrice",
    "productVariantPicker",
    "addToCartButton",
    "textInput"
  ],
  header: ["header"],
  productBox: [
    "productBox",
    "columns",
    "productMedia",
    "productPrice",
    "productVariantPicker",
    "addToCartButton"
  ],
  columns: [
    "columns",
    "productMedia",
    "productPrice",
    "productVariantPicker",
    "addToCartButton"
  ],
  productMedia: ["productMedia"],
  productPrice: ["productPrice"],
  productVariantPicker: ["productVariantPicker"],
  addToCartButton: ["addToCartButton"],
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  single: "div";
  header: typeof Header;
  productBox: typeof ProductBox;
  columns: "div";
  productMedia: typeof ProductMedia;
  productPrice: typeof ProductPriceComponent;
  productVariantPicker: typeof ProductVariantPicker;
  addToCartButton: typeof AddToCartButton;
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSingleProductPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSingleProductPage__VariantsArgs;
    args?: PlasmicSingleProductPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSingleProductPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSingleProductPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSingleProductPage__ArgProps,
          internalVariantPropNames: PlasmicSingleProductPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSingleProductPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "single") {
    func.displayName = "PlasmicSingleProductPage";
  } else {
    func.displayName = `PlasmicSingleProductPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSingleProductPage = Object.assign(
  // Top-level PlasmicSingleProductPage renders the root element
  makeNodeComponent("single"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    productBox: makeNodeComponent("productBox"),
    columns: makeNodeComponent("columns"),
    productMedia: makeNodeComponent("productMedia"),
    productPrice: makeNodeComponent("productPrice"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    addToCartButton: makeNodeComponent("addToCartButton"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicSingleProductPage
    internalVariantProps: PlasmicSingleProductPage__VariantProps,
    internalArgProps: PlasmicSingleProductPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSingleProductPage;
/* prettier-ignore-end */
