// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hPWcLUPYEAQCx68W2M99up
// Component: 8uYWn-_qPv3T

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: VqJkHSpfsMA-/component
import Button from "../../Button"; // plasmic-import: FmwlxDiCew1-/component
import Icon from "../../Icon"; // plasmic-import: OMlRT0ZkDECn/component
import { CategoryCollection } from "@plasmicpkgs/commerce";
import { CategoryField } from "@plasmicpkgs/commerce";
import { ProductCollection } from "@plasmicpkgs/commerce";
import Product from "../../Product"; // plasmic-import: TfZERPPFUwbP/component
import { ProductMedia } from "@plasmicpkgs/commerce";
import TextInput from "../../TextInput"; // plasmic-import: kbPkSE6WXfXQ/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Gmaps from "../../Gmaps"; // plasmic-import: 6E_aGAHnoGJH/component

import { useScreenVariants as useScreenVariants_1Mv16YNowK28 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 1MV16YNowK28/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../t_9_imported_dep_4/plasmic.module.css"; // plasmic-import: rJmrvZ8rTbZpYCx9aXq6iH/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hPWcLUPYEAQCx68W2M99up/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 8uYWn-_qPv3T/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: G7VTO1oIY5Ol/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: LENB83d6V84j/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: T6oyg622tahH/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: yji091Jl-BMS/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: _Gq3eT2mkBWh/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: UM82Bo7sMXTo/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: jacFiCA7aQEv/icon
import AngleRightsvgIcon from "./icons/PlasmicIcon__AngleRightsvg"; // plasmic-import: gd_fLC7pkVmg/icon
import StarSvgrepoComsvgIcon from "./icons/PlasmicIcon__StarSvgrepoComsvg"; // plasmic-import: hs5BBya4R1hF/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Xznpl4WmsyWl/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 7QjlkweO-RrC/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: F6PGrp-g60YA/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  foreground2?: Flex__<"div">;
  categoryCollection?: Flex__<typeof CategoryCollection>;
  categoryField?: Flex__<typeof CategoryField>;
  productCollection?: Flex__<typeof ProductCollection>;
  product?: Flex__<typeof Product>;
  textInput?: Flex__<typeof TextInput>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  gmaps?: Flex__<typeof Gmaps>;
  _2?: Flex__<"a"> & Partial<LinkProps>;
  textInput2?: Flex__<typeof TextInput>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1Mv16YNowK28()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___23YwA)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xiFxl)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bZzKk)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ofUb
                  )}
                >
                  {"Get 55% off Lorem Ipsum enough lorem discount"}
                </div>
              </Stack__>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__q4UWg)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__kk9Ee
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__yvs7M
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__dOgCi)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wUuKo
                      )}
                    >
                      {"Log in"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___2Zvsl)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </div>
              ) : null}
            </Stack__>
          </Stack__>
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__ygAdk)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ijEn)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__x6JE
                  )}
                >
                  {"Find everything you need to make a good coffee."}
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pox6M
                  )}
                >
                  {
                    "We believe coffee is making life much easier. This is why we offer best quality beans & Barista Material to our clients. Online and in our physical store."
                  }
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__plO8C)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__lLnrp)}
                    color={"softSand"}
                    link={`/shop`}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tXs8V
                      )}
                    >
                      {"Shop Online"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__i50U)}
                    color={"softSand"}
                    link={(() => {
                      try {
                        return "#contact";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hbjHw
                      )}
                    >
                      {"Visit our Store"}
                    </div>
                  </Button>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___9Qb5N)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__beJSj)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rTs7N)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__yEzVq)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___6Wvsx
                    )}
                  >
                    {"100% Arabica and beyond"}
                  </h2>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oRmh)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___6YjAc)}
                >
                  <Icon
                    className={classNames("__wab_instance", sty.icon__p2NHz)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__udOU
                        )}
                      >
                        {"Direct sourcing"}
                      </div>
                    }
                  >
                    <Icon5Icon
                      className={classNames(projectcss.all, sty.svg__zmsPu)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox___2AwO)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__jfow9)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__apH6M
                        )}
                      >
                        {"Organic farming practices"}
                      </div>
                    }
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__kOlSl)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__giBHd)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon___7GdXs)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s3N5D
                        )}
                      >
                        {"Biodegradable packaging"}
                      </div>
                    }
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__qSUlc)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__zKmIe)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__a5MNi)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i4X6R
                        )}
                      >
                        {"Enjoyment guarantee"}
                      </div>
                    }
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__ddqvv)}
                      role={"img"}
                    />
                  </Icon>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sMPaM)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fRUP)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oWgw5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__kztZm)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___6W7Rg
                    )}
                  >
                    {"Fresh Origin"}
                  </h2>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iYHgB
                  )}
                >
                  {
                    "What's better than having our amazing coffee at home? Getting it delivered so you never run out."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button___6LGwg)}
                  color={"softSand"}
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vqE
                    )}
                  >
                    {"Discover our coffee selection"}
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hWOxn)}
          >
            <CategoryCollection
              data-plasmic-name={"categoryCollection"}
              data-plasmic-override={overrides.categoryCollection}
              category={"5e1f3e10e3f20f3c0043d0a2"}
              className={classNames("__wab_instance", sty.categoryCollection)}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__neH9R
                      )}
                    >
                      {"No collection found!"}
                    </div>
                  )}
                </DataCtxReader__>
              }
              loadingMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ay3ET
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nPPfc)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        sty.h2__sFvB6
                      )}
                    >
                      <CategoryField
                        data-plasmic-name={"categoryField"}
                        data-plasmic-override={overrides.categoryField}
                        className={classNames(
                          "__wab_instance",
                          sty.categoryField
                        )}
                        field={"name"}
                      />
                    </h2>
                    <ProductCollection
                      data-plasmic-name={"productCollection"}
                      data-plasmic-override={overrides.productCollection}
                      className={classNames(
                        "__wab_instance",
                        sty.productCollection
                      )}
                      count={3}
                      emptyMessage={
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__r9L0K
                              )}
                            >
                              {"No product found!"}
                            </div>
                          )}
                        </DataCtxReader__>
                      }
                      includeSubCategories={true}
                      loadingMessage={
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hAHr9
                              )}
                            >
                              {"Loading..."}
                            </div>
                          )}
                        </DataCtxReader__>
                      }
                    >
                      <DataCtxReader__>
                        {$ctx => (
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___8Ck9U
                            )}
                            component={Link}
                            href={`/product/${(() => {
                              try {
                                return $ctx.currentProduct.slug;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return ``;
                                }
                                throw e;
                              }
                            })()}`}
                            platform={"nextjs"}
                          >
                            <Product
                              data-plasmic-name={"product"}
                              data-plasmic-override={overrides.product}
                              className={classNames(
                                "__wab_instance",
                                sty.product
                              )}
                            />
                          </PlasmicLink__>
                        )}
                      </DataCtxReader__>
                    </ProductCollection>
                  </div>
                )}
              </DataCtxReader__>
            </CategoryCollection>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wcLe)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__z4Py)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__k4Bi1)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fLnJp)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__zasyI
                    )}
                  >
                    {"Transparency and sustainability from \nbean to bag"}
                  </h2>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nw7Uw)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yngss)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"75%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/copy_of_t_9/images/battlecreekCoffeeRoastersY2CKex0Gv5UUnsplashjpg.jpg",
                    fullWidth: 1920,
                    fullHeight: 1280,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox___2V9Ir)}>
            <div className={classNames(projectcss.all, sty.freeBox___2ZmrM)}>
              <div className={classNames(projectcss.all, sty.columns__oAlqK)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__dwSvH)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ktwSl
                    )}
                  >
                    {"Brewing guides"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dDT
                    )}
                  >
                    {
                      "You don't need a chemistry degree to make great coffee at home. We've done the lab work, so all you have to do is follow our step-by-step instructions."
                    }
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___7OBc4
                    )}
                    component={Link}
                    href={`/about`}
                    platform={"nextjs"}
                  >
                    {"Brew with confidence"}
                  </PlasmicLink__>
                </Stack__>
                <div className={classNames(projectcss.all, sty.column__osg3)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zK6Mw)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_t_9/images/mikeKenneallyZlwDJoKTuA8Unsplashjpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1282,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__acf4T)}>
            <div className={classNames(projectcss.all, sty.freeBox__zI7Gl)}>
              <div className={classNames(projectcss.all, sty.columns___72JUr)}>
                <div className={classNames(projectcss.all, sty.column__kzE0Q)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__yXvOy)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_t_9/images/mikeKenneallyTNaLoIZhqVmUnsplash1Jpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1260,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__zRYml)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ixDXz
                    )}
                  >
                    {"Latte art classes"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qmAbv
                    )}
                  >
                    {
                      "No, we aren't kidding. Spend the morning with a master barista learning how to pour a grammable rosetta in our well-lit and aesthetically pleasing Alexandria roastery."
                    }
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__zCw9P
                    )}
                    component={Link}
                    href={`/about`}
                    platform={"nextjs"}
                  >
                    {"View class details"}
                  </PlasmicLink__>
                </Stack__>
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___00Mml)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lBaFe)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dxUWv)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pXgw0)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dZTn
                    )}
                  >
                    {
                      "\u201cWe're never drinking supermarket coffee pods again\u201d"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kxmaT
                    )}
                  >
                    {"\u2014 Bustle"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fNr77)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gf7DL
                    )}
                  >
                    {
                      "\u201cOur publishing rate has increased 34% since getting an office subscription\u201d"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ggyEi
                    )}
                  >
                    {"\u2014 Refinery29"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lqPmj)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__be0Ho
                    )}
                  >
                    {
                      "\u201cThis story is available to BI Prime subscribers only\u201d"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rsyM1
                    )}
                  >
                    {"\u2014 Business Insider "}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gI8H)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jpV6F
                    )}
                  >
                    {
                      "\u201cOrigin is disrupting the specialty coffee world in a big way\u201d"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__udI7
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"\u2014 Fast Company"}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__jD4Gc)}>
            <div className={classNames(projectcss.all, sty.freeBox__vMzC3)}>
              <div className={classNames(projectcss.all, sty.columns__q4Dmr)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__whdwm)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__i5K
                    )}
                  >
                    {"Caffeinate your inbox"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y6FLl
                    )}
                  >
                    {
                      "If we could send you coffee via email we would. Until then, it's the most legit coffee-related stuff, every week or two."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ozlag)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      endIcon={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__b5O7T
                          )}
                          submitsForm={true}
                        >
                          <AngleRightsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lHk5N
                            )}
                            role={"img"}
                          />
                        </Button>
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"E-mail"}
                      showEndIcon={true}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <div className={classNames(projectcss.all, sty.column__lEw2E)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__qF9Wh)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_t_9/images/mikeKenneallyZlwDJoKTuA8Unsplashjpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1282,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oSyMd)}>
            <div className={classNames(projectcss.all, sty.freeBox__wUdja)}>
              <div className={classNames(projectcss.all, sty.freeBox___59U2H)}>
                <div className={classNames(projectcss.all, sty.freeBox__orRqZ)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__qIaPo
                    )}
                  >
                    {"Their words, not ours"}
                  </h2>
                </div>
                {(() => {
                  const child$Props = {
                    arrows: true,
                    autoplay: true,
                    autoplaySpeed: 3000,
                    beforeChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ),
                    centerMode: true,
                    centerPadding: hasVariant(
                      globalVariants,
                      "screen",
                      "mobileOnly"
                    )
                      ? "0%"
                      : "25%",
                    className: classNames("__wab_instance", sty.sliderCarousel),
                    dots: false,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel",
                      "currentSlide"
                    ]),
                    ref: ref => {
                      $refs["sliderCarousel"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel__slider"]
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel"}
                      data-plasmic-override={overrides.sliderCarousel}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__crmLg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zZ8
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__maobi
                            )}
                          >
                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lcPf
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9UFdQ
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___60Jc7
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qTbZw
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__p4LO
                              )}
                              role={"img"}
                            />
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pl1M7
                            )}
                          >
                            {
                              '"A sem a velit consequat a torquent posuere nibh consectetur ac \nsodales mi vulputate imperdiet suspendisse a adipiscing felis convallis \nest tristique faucibus condimentum ante viverra."'
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dewSx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___10GRm
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xlpqk
                            )}
                          >
                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rkjca
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__s41U
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5MtX2
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__afVqw
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__oYyDl
                              )}
                              role={"img"}
                            />
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__r5Ynp
                            )}
                          >
                            {
                              '"A sem a velit consequat a torquent posuere nibh consectetur ac \nsodales mi vulputate imperdiet suspendisse a adipiscing felis convallis \nest tristique faucibus condimentum ante viverra."'
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8SE0D
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c6Xen
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__floBg
                            )}
                          >
                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0QC6A
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jEnzZ
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5Do98
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__g17M
                              )}
                              role={"img"}
                            />

                            <StarSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__h2Vh0
                              )}
                              role={"img"}
                            />
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ty0Ct
                            )}
                          >
                            {
                              '"A sem a velit consequat a torquent posuere nibh consectetur ac \nsodales mi vulputate imperdiet suspendisse a adipiscing felis convallis \nest tristique faucibus condimentum ante viverra."'
                            }
                          </div>
                        </div>
                      </div>
                    </SliderWrapper>
                  );
                })()}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__wqK2)}
                id={"contact"}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__sf6O7
                  )}
                >
                  {"Come visit our shop"}
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lVcf2
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Opening Hours:"}
                    </span>
                    <React.Fragment>
                      {"\nMonday - Saturday | 07:30 - 14:00\nSunday | Closed"}
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <Gmaps
                data-plasmic-name={"gmaps"}
                data-plasmic-override={overrides.gmaps}
                className={classNames("__wab_instance", sty.gmaps)}
              />
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__erNwP)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xymPo)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__olNoD)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__iBbvN)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3BbfT
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us\n"
                      : "Contact us\n"}
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__sIpcU
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "(555) 555-5555"
                      : "(555) 555-5555"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__fWDuk
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"support@example.com"}
                  </PlasmicLink__>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6PmZ9)}
              >
                <PlasmicLink__
                  data-plasmic-name={"_2"}
                  data-plasmic-override={overrides._2}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty._2
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "#"
                      : `/shop`
                  }
                  platform={"nextjs"}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Shop"
                    : "Shop"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tohJ
                  )}
                  component={Link}
                  href={`/academy`}
                  platform={"nextjs"}
                >
                  {"The Academy"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__iiwSl
                  )}
                  component={Link}
                  href={`/about`}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__z4UCk
                  )}
                  component={Link}
                  href={`/help`}
                  platform={"nextjs"}
                >
                  {"Help"}
                </PlasmicLink__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lnEFa)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rok2K
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Email newsletter"
                    : "Email newsletter"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ivJu3)}>
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    endIcon={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__fl3QD
                        )}
                        submitsForm={true}
                      >
                        <AngleRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__zowW)}
                          role={"img"}
                        />
                      </Button>
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput2",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "E-mail"
                        : "E-mail"
                    }
                    showEndIcon={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    }
                    value={
                      generateStateValueProp($state, ["textInput2", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__locAu)}
              >
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__fUeq9
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__unDtg)}
                      role={"img"}
                    />
                  ) : null}
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bvlNh)}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon3Icon
                          : Icon3Icon
                      }
                      className={classNames(projectcss.all, sty.svg__iKcE4)}
                      role={"img"}
                    />

                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__cTsgU)}
                      role={"img"}
                    />

                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon28Icon
                          : Icon28Icon
                      }
                      className={classNames(projectcss.all, sty.svg__y1YMh)}
                      role={"img"}
                    />
                  </Stack__>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__dolcL)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
              </Stack__>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__pPnms)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button___8O7C2
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__w8HiO
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__lIKa)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sHlzd
                      )}
                    >
                      {"Log in"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__hGJaX)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </div>
              ) : null}
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__j2M5B)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xxviN)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___64EFn)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__e9Li)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hMmtW
                      )}
                    >
                      {"\u00a9 Company. All rights reserved."}
                    </div>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jWqkR)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sL322)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fVs7)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ptNn
                        )}
                      >
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__tyLzD
                          )}
                          component={Link}
                          href={`/shipping`}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__oamX
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o9RRk
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "shop"
                              : "Shipping & Returns"}
                          </div>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zuBy
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___4Fn0N
                          )}
                          component={Link}
                          href={`/privacypolicy`}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__o0EHt
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vkqpn
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sw65L
                            )}
                          >
                            {"Privacy policy"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__fHXmA
                          )}
                          component={Link}
                          href={`/terms`}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uM0Zd
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yr2CX
                            )}
                          >
                            {"Terms & Conditions"}
                          </div>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qi5Rt
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
          </Stack__>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "foreground2",
    "categoryCollection",
    "categoryField",
    "productCollection",
    "product",
    "textInput",
    "sliderCarousel",
    "gmaps",
    "_2",
    "textInput2"
  ],
  header: ["header"],
  foreground2: ["foreground2"],
  categoryCollection: [
    "categoryCollection",
    "categoryField",
    "productCollection",
    "product"
  ],
  categoryField: ["categoryField"],
  productCollection: ["productCollection", "product"],
  product: ["product"],
  textInput: ["textInput"],
  sliderCarousel: ["sliderCarousel"],
  gmaps: ["gmaps"],
  _2: ["_2"],
  textInput2: ["textInput2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  foreground2: "div";
  categoryCollection: typeof CategoryCollection;
  categoryField: typeof CategoryField;
  productCollection: typeof ProductCollection;
  product: typeof Product;
  textInput: typeof TextInput;
  sliderCarousel: typeof SliderWrapper;
  gmaps: typeof Gmaps;
  _2: "a";
  textInput2: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    foreground2: makeNodeComponent("foreground2"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryField: makeNodeComponent("categoryField"),
    productCollection: makeNodeComponent("productCollection"),
    product: makeNodeComponent("product"),
    textInput: makeNodeComponent("textInput"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    gmaps: makeNodeComponent("gmaps"),
    _2: makeNodeComponent("_2"),
    textInput2: makeNodeComponent("textInput2"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
